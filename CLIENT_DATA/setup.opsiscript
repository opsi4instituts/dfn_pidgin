[Actions]
; common Values for (un)installation
include_insert "common.opsiinc"

ChangeDirectory "%SCRIPTPATH%"
if not(HasMinimumSpace ("%SystemDrive%", $MinimumSpace$))
        LogError "Not enough space on %SystemDrive%, " + $MinimumSpace$ + " on drive %SystemDrive% needed for " + $ProductId$
        isFatalError "No Space!"
else
        comment "Space OK"
endif
if not( FileExists($InstallProgram$) )
        LogError "Setupfile NOT exists (" + $InstallProgram$ +")"
        isFatalError "No Setupfile!"
else
        comment "Setupfile OK (exists)"
endif

if FileExists("%ScriptPath%\delsub.opsiscript")
	comment "Start uninstall sub section"
	Sub "%ScriptPath%\delsub.opsiscript"
endif
	
Message "installing (new) %installingProdName% 32Bit (%installingProdVersion%)..."

; wird als decimal erwartet, nicht hex: de (hex: 0407, dec: 1031), en_US (hex: 0409, dec: 1033)
; https://msdn.microsoft.com/en-us/goglobal/bb895996.aspx
Set $Language$ = GetProductProperty("language","auto")
if ($Language$ = "auto")
	comment "decide which language to use"
	set $LanguageMap$ = GetLocaleInfoMap
	set $System_language$ = lower(getValue("system_default_language_id", $languagemap$))
	if $System_language$ = "0407"
		comment "The detected language code is German"
		Set $Language$ = "de"
	endif
   	if $System_language$ = "0409"
   		comment "The detected language code is English"
   		Set $Language$ = "en"
   	endif
endif
Switch $Language$
	Case "de"
		Set $LCID$ = "1031"
	EndCase
	Case "en"
		Set $LCID$ = "1033"
	EndCase
EndSwitch

comment "Start setup program"
Winbatch_install
Set $ExitCode$ = getLastExitCode
if stringToBool(isNsisExitcodeFatal($ExitCode$, "True", $ErrorString$))
	isFatalError
endif
		
; Ergebnis ist StringList (mehrere Einträge möglich);
; in einer Zeile werden drei Ergebnisse mit "|" abgetrennt geliefert: Registrykey (mit Pfad) | Bereich Registry (kann direkt getRegistryValue übergeben werden | DisplayName
; z.B. HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Test64|64bit|Test Registry Entry64
Set $ResultList$ = SearchRegistryUninstallKeys($ProductName$)

if ( count ($ResultList$) = "0" )
	logError "Fatal: After Installation " + $ProductName$ + " could not be found in registry"
	isFatalError
else
	comment "Successful Installation"
	Set $RegId$ = takeString (0,splitString(takeString(0,$ResultList$), '|'))
	Set $RegBitScope$ = takeString (1,splitString(takeString(0,$ResultList$), '|'))

	comment "Get 'DisplayIcon' from registry for path to exe"
	Set $PathToExe$ = GetRegistryValue($RegId$, "DisplayIcon", $RegBitScope$)

	comment "Check version"
	Set $InstalledVersion$ = GetRegistryValue($RegId$, "DisplayVersion", $RegBitScope$)
	if not (contains($InstalledVersion$, $ProductVersion$))
		LogError "Wrong version number found, something went wrong."
		isFatalError
	endif
		
	if $DesktopLink$ = "True"
		comment "Create common desktop link"
		Linkfolder_create_desktoplink
	endif

	comment "include custom post install file"
	set $CustomPostInstall$ = getProductProperty("custom-post-install","none")
	if not ($CustomPostInstall$ = "none")
		if FileExists("%ScriptPath%\custom\" + $CustomPostInstall$)
			include_insert "%ScriptPath%\custom\" + $CustomPostInstall$
		endif
	endif
endif

[Winbatch_install]
"%ScriptPath%\$InstallProgram$" /DS=0 /L=$LCID$ /S

[Linkfolder_create_desktoplink]
set_basefolder common_desktopdirectory
set_subfolder ""

set_link
 	name: $ProductName$
 	target: $PathToExe$
end_link
